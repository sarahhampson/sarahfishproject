theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Taxonomic novelty")) +
labs(x="Community category", y=expression("|" *Delta*" community mean size |"))
# Save plot
ggsave(
filename="taxAbsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
# Functional
ggplot(data = func_Absize_plot_df) +
geom_violin(data=comms_size_df, aes(x=funcnovel, Abtraitchange), trim=T) +
geom_point(aes(funcnovel, y=Mean_Estimate)) +
geom_errorbar(aes(as.factor(funcnovel), ymin=CI_Lower, ymax=CI_Upper), width=0.15, linetype=1) +
geom_errorbar(aes(as.factor(funcnovel), ymin=PI_Lower, ymax=PI_Upper), width=0.15, linetype=2) +
#geom_jitter(data=comm_size_df, aes(x=funcnovel, y=traitchange), width=0.2, alpha=0.25)
theme_classic() +
theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Functional novelty")) +
labs(x="Community category", y=expression("|" *Delta*" community mean size |"))
# Save plot
ggsave(
filename="funcAbsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
# 3.  Raw size change plots -----------------------------------------------
# Taxonomic
ggplot(data = tax_size_plot_df) +
geom_violin(data=comms_size_df, aes(x=taxnovel, traitchange), trim=F) +
geom_point(aes(taxnovel, y=Mean_Estimate)) +
geom_errorbar(aes(as.factor(taxnovel), ymin=CI_Lower, ymax=CI_Upper), width=0.15, linetype=1) +
geom_errorbar(aes(as.factor(taxnovel), ymin=PI_Lower, ymax=PI_Upper), width=0.15, linetype=2) +
#geom_jitter(data=comm_size_df, aes(x=taxnovel, y=traitchange), width=0.2, alpha=0.25)
theme_classic() +
theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Taxonomic novelty")) +
labs(x="Community category", y=expression(Delta*" community mean size"))
# Save plot
ggsave(
filename="taxrawsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
# Functional
ggplot(data = func_size_plot_df) +
geom_violin(data=comms_size_df, aes(x=funcnovel, traitchange), trim=F) +
geom_point(aes(funcnovel, y=Mean_Estimate)) +
geom_errorbar(aes(as.factor(funcnovel), ymin=CI_Lower, ymax=CI_Upper), width=0.15, linetype=1) +
geom_errorbar(aes(as.factor(funcnovel), ymin=PI_Lower, ymax=PI_Upper), width=0.15, linetype=2) +
#geom_jitter(data=comm_size_df, aes(x=funcnovel, y=traitchange), width=0.2, alpha=0.25)
theme_classic() +
theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Functional novelty")) +
labs(x="Community category", y=expression(Delta*" community mean size"))
# Save plot
ggsave(
filename="funcrawsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
# 4.  Standard deviation change plots -------------------------------------
# Taxonomic
ggplot(data = tax_sdsize_plot_df) +
geom_violin(data=comms_size_df, aes(x=taxnovel, sdchange), trim=F) +
geom_point(aes(taxnovel, y=Mean_Estimate)) +
geom_errorbar(aes(as.factor(taxnovel), ymin=CI_Lower, ymax=CI_Upper), width=0.15, linetype=1) +
geom_errorbar(aes(as.factor(taxnovel), ymin=PI_Lower, ymax=PI_Upper), width=0.15, linetype=2) +
#geom_jitter(data=comm_size_df, aes(x=taxnovel, y=traitchange), width=0.2, alpha=0.25)
theme_classic() +
theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Taxonomic novelty")) +
labs(x="Community category", y=expression(Delta* " standard deviation in size"))
# Save plot
ggsave(
filename="taxsdsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
# Functional
ggplot(data = func_sdsize_plot_df) +
geom_violin(data=comms_size_df, aes(x=funcnovel, sdchange), trim=F) +
geom_point(aes(funcnovel, y=Mean_Estimate)) +
geom_errorbar(aes(as.factor(funcnovel), ymin=CI_Lower, ymax=CI_Upper), width=0.15, linetype=1) +
geom_errorbar(aes(as.factor(funcnovel), ymin=PI_Lower, ymax=PI_Upper), width=0.15, linetype=2) +
#geom_jitter(data=comm_size_df, aes(x=funcnovel, y=traitchange), width=0.2, alpha=0.25)
theme_classic() +
theme(axis.ticks.x=element_blank()) +
scale_x_discrete(labels = c("Not novel", "Functional novelty")) +
labs(x="Community category", y=expression(Delta*" standard deviation in size"))
# Save plot
ggsave(
filename="funcsdsizeplot", plot = last_plot(),
device = "pdf", path = "./figures/MBl",
scale = 1, width = 10, height = 15,
units = "cm", dpi = 300)
rm(comms_size_df, func_Absize_plot_df, func_glm_site_df, func_sdsize_plot_df,
func_size_plot_df, tax_Absize_plot_df, tax_glm_site_df, tax_sdsize_plot_df,
tax_size_plot_df)
# Read results csvs
#tax_results_df <- read.csv("./detection results/tax_results_df.csv")
#func_results_df <- read.csv("./detection results/func_results_df.csv")
full_results_df <- read.csv("./detection results/full_results_df.csv")
trait_data <- read.csv("./inputs/data/trait_data.csv")
# Need taxonomic matrix list, if not already in environment run this
survey_data <- read.csv("./inputs/data/survey_data.csv")
ts_data <- read.csv("./inputs/data/ts_data.csv")
taxonomic_matrix_list <- seasonal.matrix.maker(survey_data, ts_data)
trait_data$troph_level
histogram(trait_data$troph_level)
# Make list of communities and include year it emerges and the year of data beforehand
comms <- full_results_df %>%
mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before)
View(trait_data)
# Use this function to extract the abundance weighted community mean trait
comms_size_data_list <- find.commS.trait.data(comms, taxonomic_matrix_list, trait_data, "troph_level")
comms_troph_data_list <- comms_size_data_list
rm(comms_size_data_list)
temp_df <- lapply(split(full_results_df, f=full_results_df$sqID),
function(x){
x$TS_Length <- nrow(x)
x$Yrs_passed <- x$bins - min(x$bins)
x$Yr_pos <- 1:nrow(x)
return(x)
})
full_results_df <- do.call("rbind", temp_df)
# Change character columns to numeric
comms_troph_df[, 2:9] <- lapply(2:9, function(x){
as.numeric(comms_troph_df[[x]])
})
comms_troph_df <- data.frame(comms_troph_data)
# Row bind these into tax and func comm size data
comms_troph_data <- do.call("rbind", comms_troph_data_list)
comms_troph_df <- data.frame(comms_troph_data)
# Change character columns to numeric
comms_troph_df[, 2:9] <- lapply(2:9, function(x){
as.numeric(comms_troph_df[[x]])
})
# Merge with full results df
full_results_df_troph <- merge(full_results_df, comms_troph_df,
by.y=c("sqID", "YearofComm"),
by.x=c("sqID", "bins"))
View(comms_troph_df)
is.na(comms_troph_df$meantrait)
count(is.na(comms_troph_df$meantrait))
sum(is.na(comms_troph_df$meantrait))
# Load full results csv
full_results_df <- read.csv("./detection results/full_results_df.csv")
# Count of times novelty occurred
sum(full_results_df$taxnovel=="TRUE")
sum(full_results_df$funcnovel=="TRUE")
# Summary table for tax novelty
full_results_df %>%
filter(taxnovel) %>%
group_by(Site) %>%
summarize(taxnovel_count = n()) %>%
group_by(taxnovel_count) %>%
summarize(site_count = n())
# Summary table for tax novelty
full_results_df %>%
filter(taxnovel) %>%
group_by(sqID) %>%
summarize(taxnovel_count = n()) %>%
group_by(taxnovel_count) %>%
summarize(site_count = n())
Site
# Summary table for tax novelty
full_results_df %>%
filter(taxnovel) %>%
group_by(Site) %>%
summarize(taxnovel_count = n()) %>%
group_by(taxnovel_count) %>%
summarize(site_count = n())
full_results_df %>% filter(taxnovel==TRUE) %>% summarise(n_distinct(TimeSeriesID))
full_results_df %>% filter(taxnovel==TRUE) %>% summarise(n_distinct(Site))
# Summary table for func novelty
full_results_df %>%
filter(funcnovel) %>%
group_by(Site) %>%
summarize(taxnovel_count = n()) %>%
group_by(taxnovel_count) %>%
summarize(site_count = n())
# Summary table for func novelty
full_results_df %>%
filter(funcnovel) %>%
group_by(sqID) %>%
summarize(taxnovel_count = n()) %>%
group_by(taxnovel_count) %>%
summarize(site_count = n())
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
# Install mFD package
install.packages("mFD")
# Get one species x abundance matrix
relA_data <- taxonomic_matrix_list[[1]]
View(relA_data)
# Make distrance matrix
sp_dist_fruits <- mFD::funct.dist(
sp_tr         = relA_data,
tr_cat        = trait_data,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]])
# Make distrance matrix
sp_dist_fruits <- mFD::funct.dist(
sp_tr         = relA_data,
tr_cat        = trait_data,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% colnames(relA_data))
# Make distrance matrix
sp_dist_fruits <- mFD::funct.dist(
sp_tr         = relA_data,
tr_cat        = trait_data,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% dimnames(relA_data))
?gsub
# Change species to have a gap
gsub(".", " ", trait_data)
# Change species to have a gap
gsub(".", " ", colnames(trait_data))
View(trait_data)
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
View(trait_data)
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]])
gsub(".", " ", colnames(relA_data))
gsub(".", " ", dimnames(relA_data))
# Get one species x abundance matrix
relA_data <- taxonomic_matrix_list[[1]]
gsub(".", " ", dimnames(relA_data))
dimnames(relA_data) <- gsub(".", " ", dimnames(relA_data))
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]])
dimnames(relA_data) <- gsub(".", " ", dimnames(relA_data))
colnames(relA_data) <- gsub(".", " ", colnames(relA_data))
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]])
# Create a list of relative abundance matrices using matrix maker function
# Note these are split into quarter time series
taxonomic_matrix_list <- seasonal.matrix.maker(survey_data, ts_data)
View(taxonomic_matrix_list)
taxonomic_matrix_list[["G10003 Q4"]]
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]])
View(relA_data)
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[1])
# Get one species x abundance matrix
relA_data <- data.frame(taxonomic_matrix_list[[1]], check.names = FALSE)
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% rownames(relA_data))
relA_species <- rownames(relA_data)
relA_species <- colnames(relA_data)
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% colnames(relA_data))
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% relA_Species)
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% relA_Species)
# Drop the species from the trait_data that aren't in the abundance data
trait_data <- trait_data %>% filter(Species %in% relA_species)
test <- dbFD(trait_data,
relA_data,
w.abund=T,
calc.FRic=T,
m=5,
calc.CWM=T,
calc.FDiv = T,
print.pco=T,
)
test <- dbFD(trait_data,
relA_data,
w.abun=T,
calc.FRic=T,
m=5,
calc.CWM=T,
calc.FDiv = T,
print.pco=T,
)
View(trait_data)
rownames(trait_data) <- trait_data$Species
trait_data <- trait_data %>% select(-X, Species)
trait_data <- trait_data %>% select(-X, -Species)
trait_data <- trait_data %>% dplyr::select(-X, -Species)
test <- dbFD(trait_data,
relA_data,
w.abun=T,
calc.FRic=T,
m=5,
calc.CWM=T,
calc.FDiv = T,
print.pco=T,
)
View(test)
test[["nbsp"]]
test[["sing.sp"]]
test[["FRic"]]
test[["FEve"]]
test[["FDiv"]]
test[["CWM"]]
test[["x.axes"]]
# Make distrance matrix
testmFD <- mFD::funct.dist(
sp_tr         = relA_data,
tr_cat        = trait_data,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
traits_cat <-matrix(ncol=2)
traits_cat$trait_name <- rownames(trait_data)
View(traits_cat)
traits_cat$trait_name <- colnames(trait_data)
View(traits_cat)
traits_cat$trait_name <- names(trait_data)
traits_cat$trait_name <- names(trait_data)[3]
traits_cat <-data.frame(matrix(ncol=2))
traits_cat$trait_name <- names(trait_data)[3]
traits_cat <-data.frame(matrix(ncol=2, nrow=11))
traits_cat$trait_name <- names(trait_data)
traits_cat <- names(trait_data)
traits_cat <- as.data.frame(names(trait_data))
View(traits_cat)
traits_cat <-data.frame(matrix(ncol=2, nrow=13))
traits_cat$trait_name <- names(trait_data)
traits_cat <-data.frame(matrix(ncol=2, nrow=11))
traits_cat$trait_name <- names(trait_data)
colnames(traits_cat=c("trait_name", "trait_type"))
traits_cat <-data.frame(matrix(ncol=2, nrow=11))
colnames(traits_cat=c("trait_name", "trait_type"))
colnames(traits_cat) <- c("trait_name", "trait_type"))
colnames(traits_cat) <- c("trait_name", "trait_type")
traits_cat$trait_name <- names(trait_data)
traits_cat$trait_type <- "Q"
# Make distrance matrix
testmFD <- mFD::funct.dist(
sp_tr         = relA_data,
tr_cat        = trait_data,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Make distrance matrix
testmFD <- mFD::funct.dist(
sp_tr         = trait_data,
tr_cat        = traits_cat,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Make distrance matrix
testmFD <- mFD::funct.dist(
sp_tr         = trait_data,
tr_cat        = traits_cat,
metric        = "euclidean",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
testmFD
# Make distrance matrix
testmFD <- mFD::funct.dist(
sp_tr         = trait_data,
tr_cat        = traits_cat,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
View(find.comm.trait.data)
View(full_results_df)
# Verification variables
ID <- full_results_df %>%
mutate(mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before))
# Verification variables
ID <- full_results_df %>%
dplyr::mutate(mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before)) %>%
filter(sqID="G10003 Q4") %>% select(sqID, bins, bin.before)
# Verification variables
ID <- full_results_df %>%
dplyr::mutate(mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before)) %>%
filter(sqID="G10003 Q4") %>% dplyr::select(sqID, bins, bin.before)
# Verification variables
ID <- full_results_df %>%
dplyr::mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before) %>%
filter(sqID="G10003 Q4")
# Verification variables
ID <- full_results_df %>%
dplyr::mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before) %>%
filter(sqID=="G10003 Q4")
# Verification variables
comm <- full_results_df %>%
dplyr::mutate(bins.before = as.numeric(bins)-as.numeric(bin.lag)) %>%
dplyr::select(sqID, bins, bins.before) %>%
filter(sqID=="G10003 Q4")
# Define some subset variables
ID <- comm$sqID[1]
yearofcomm <- as.numeric(comm$bins[1])
yearb4comm <- as.numeric(comm$bins.before[1])
mat_ID <- "G10003 Q4"
mat <- taxonomic_matrix_list[["G10003 Q4"]]
View(mat)
# If they do, extract the year of community time point and year before data
temp_df <- as.data.frame(mat) %>% mutate(Year=rownames(mat))
year_of_comm <- subset(temp_df, Year==yearofcomm) %>% mutate(cat="yofComm")
year_b4_comm <- subset(temp_df, Year==yearb4comm) %>% mutate(cat="yb4Comm")
# Turn to long format
year_of_comm_long <- pivot_longer(year_of_comm,
cols=-c("Year", "cat"),
names_to="Species",
values_to="Abundance")
year_b4_comm_long <- pivot_longer(year_b4_comm,
cols=-c("Year", "cat"),
names_to="Species",
values_to="Abundance")
# Merge these
temp2_df <- rbind(year_of_comm_long, year_b4_comm_long)
View(temp2_df)
# Filter trait_data to only include species in the abundance matrix
trait_data <- trait_data %>% dplyr::select(Species %in% rownames(temp2_df$Species)
# Merge with size data
temp2_df <- merge(temp2_df, trait_data, by="Species")
# Filter trait_data to only include species in the abundance matrix
trait_data <- trait_data %>% dplyr::select(Species %in% rownames(temp2_df$Species))
# Filter trait_data to only include species in the abundance matrix
trait_data <- trait_data %>% dplyr::select(Species %in% temp2_df$Species)
View(trait_data)
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
View(trait_data)
# Filter trait_data to only include species in the abundance matrix
trait_data <- trait_data %>% dplyr::select(Species %in% temp2_df$Species)
# Filter trait_data to only include species in the abundance matrix
trait_data <- trait_data %>% dplyr::filter(Species %in% temp2_df$Species)
# Merge with size data
temp2_df <- merge(temp2_df, trait_data, by="Species")
citation()
# Load full results csv
trait_data <- read.csv("./inputs/data/trait_data.csv")
species_list <- trait_data$Species
species_info_df <- data.frame(Species = character(),
Genus = character(),
Family = character(),
stringsAsFactors = FALSE)
# Loop through the species list and extract genus and family information
for (i in seq_along(species_list)) {
species_info <- species(species_list[i], fetch = "genus")
genus_name <- species_info$genus[1]
family_name <- species_info$family[1]
# add the results to the data frame
species_info_df[i, "Species"] <- species_list[i]
species_info_df[i, "Genus"] <- genus_name
species_info_df[i, "Family"] <- family_name
}
species_info <- species(species_list[1], fetch = "genus")
genus_name <- species_info$genus[1]
species_list <- c("Oreochromis niloticus", "Salmo trutta", "Gadus morhua")
species_info <- species(species_list[1], fetch = "genus")
View(species_info)
species_info <- species(species_list[1], fetch = "Genus")
genus_name <- species_info$Genus[1]
family_name <- species_info$Family[1]
standardise.species.names(species_list)
standardise.species.names(trait_data)
species_list <- trait_data$Species
# Create an empty data frame to store the results
species_info_df <- data.frame(Species = character(),
Genus = character(),
Family = character(),
stringsAsFactors = FALSE)
# Loop through the species list and extract genus and family information
for (i in seq_along(species_list)) {
species_info <- species(species_list[i], fetch = "Genus")
genus_name <- species_info$Genus[1]
family_name <- species_info$Family[1]
# add the results to the data frame
species_info_df[i, "Species"] <- species_list[i]
species_info_df[i, "Genus"] <- genus_name
species_info_df[i, "Family"] <- family_name
}
species_info <- species(species_list[i], fetch = "Genus")
genus_name <- species_info$Genus[1]
family_name <- species_info$Family[1]
View(species_info)
